# main.py
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import (
    Message,
    WebAppInfo,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    MenuButtonWebApp,
)

# -------------------------
# Config: try config.py then env
# -------------------------
try:
    from config import BOT_TOKEN, MINI_APP_URL
except Exception:
    BOT_TOKEN = os.getenv("BOT_TOKEN", "")
    MINI_APP_URL = os.getenv("MINI_APP_URL", "https://yourdomain.com/web/")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is missing ‚Äî set it in config.py or env variable BOT_TOKEN")

# -------------------------
# Logging
# -------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# -------------------------
# Init bot
# -------------------------
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()

# -------------------------
# Menu button (WebApp)
# -------------------------
async def set_webapp_menu(bot: Bot):
    try:
        await bot.set_chat_menu_button(
            menu_button=MenuButtonWebApp(text="–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è", web_app=WebAppInfo(url=MINI_APP_URL))
        )
        logging.info("WebApp menu set.")
    except Exception as e:
        logging.warning(f"Couldn't set webapp menu: {e}")


# -------------------------
# Keyboards
# -------------------------
def get_start_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø—É—Ç—å", web_app=WebAppInfo(url=MINI_APP_URL))],
        [InlineKeyboardButton(text="üîç –ß—Ç–æ —è —É–º–µ—é", callback_data="about_features")],
        [InlineKeyboardButton(text="üìñ –û –∫–Ω–∏–≥–µ", callback_data="about_book")],
        [InlineKeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
    ])


def get_back_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
    ])


# -------------------------
# /start handler
# -------------------------
@router.message(Command("start"))
async def cmd_start(message: Message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç.\n\n"
        "–¢—ã –Ω–µ –æ–¥–∏–Ω. –ò —Ç—ã –Ω–µ —Å–ª–æ–º–∞–ª—Å—è.\n"
        "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ ‚Äî –∏ –æ–Ω –∏–º–µ–µ—Ç —Å–º—ã—Å–ª.\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø–æ –∫–Ω–∏–≥–µ ¬´–ù–∞–π—Ç–∏ —Å–µ–±—è¬ª.\n"
        "–í—Å—ë –∑–¥–µ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ü—Ä–æ—Å—Ç–æ –±—É–¥—å —Å —Å–æ–±–æ–π —á–µ—Å—Ç–µ–Ω."
    )
    await message.answer(welcome_text, reply_markup=get_start_keyboard())


# -------------------------
# Callback handler
# -------------------------
@router.callback_query()
async def handle_callbacks(callback: types.CallbackQuery):
    data = callback.data or ""
    if data == "about_features":
        text = (
            "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è:\n\n"
            "‚Ä¢ üìç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ¬´6 —É—Ä–æ–≤–Ω–µ–π¬ª ‚Äî –±—ã—Å—Ç—Ä–æ–µ —Å–∞–º–æ—â—É–ø–∏–µ\n"
            "‚Ä¢ üî• –¢–µ—Å—Ç –Ω–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ (Maslach) ‚Äî –æ—Ü–µ–Ω–∫–∞ —Ç—Ä—ë—Ö —à–∫–∞–ª\n"
            "‚Ä¢ üåø –ü—Ä–∞–∫—Ç–∏–∫–∏: ¬´–ü–æ–ª–µ –ª—é–±–≤–∏¬ª, ¬´–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–µ¬ª, ¬´–°–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å —Å–æ–±–æ–π¬ª\n"
            "‚Ä¢ üìù –î–Ω–µ–≤–Ω–∏–∫ –∏ —à–∞–±–ª–æ–Ω—ã\n"
            "‚Ä¢ üì¨ –ú—è–≥–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        )
        await callback.message.edit_text(text, reply_markup=get_back_keyboard())

    elif data == "about_book":
        text = (
            "üìñ ¬´–ù–∞–π—Ç–∏ —Å–µ–±—è¬ª ‚Äî –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: "
            "–æ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–∏–º–ø—Ç–æ–º–æ–≤ –∫ –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–º –∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º.\n\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
        )
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å (Ozon)", url="https://ozon.ru/t/HU6kW2c")],
            [InlineKeyboardButton(text="üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –ú–∞—Å—Ç–µ—Ä—Å–∫—É—é", web_app=WebAppInfo(url=MINI_APP_URL))],
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
        ]))

    elif data == "support":
        text = (
            "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è: —Å–æ–æ–±—â–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É\n"
            "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: –∞–≤—Ç–æ—Ä ‚Äî –ê—Ä—Ç—ë–º –ì—Ä–∞—Ñ–æ–≤\n"
            "‚Ä¢ –¢—Ä–µ–Ω–∏–Ω–≥–∏: –∫–∞–Ω–∞–ª –≤ Telegram"
        )
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü§ñ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="report_bug")],
            [InlineKeyboardButton(text="üë§ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", url="https://t.me/bartXIII")],
            [InlineKeyboardButton(text="üéì –¢—Ä–µ–Ω–∏–Ω–≥–∏", url="https://t.me/naivedream")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")]
        ]))

    elif data == "report_bug":
        await callback.message.edit_text("–û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å.", reply_markup=get_back_keyboard())

    elif data == "back_to_start":
        await cmd_start(callback.message)

    await callback.answer()


# -------------------------
# WebApp data handler
# -------------------------
@router.message()
async def handle_webapp_data(message: Message):
    """
    Handles messages and web_app_data from the Mini App.
    The Mini App should send JSON strings via Telegram.WebApp.sendData({ ... }).
    """
    # handle data from WebApp
    webapp = getattr(message, "web_app_data", None)
    if webapp and getattr(webapp, "data", None):
        raw = webapp.data
        logging.info(f"Received web_app_data from {message.from_user.id}: {raw}")
        # raw is a stringified JSON from WebApp (client side)
        # We'll do simple substring checks and also try to parse JSON
        try:
            import json
            payload = json.loads(raw)
        except Exception:
            payload = {"_raw": raw}

        # Examples of actions we expect:
        # { action: "practice_completed", practice: "love-field" }
        # { action: "transformation_step", step: 2, note: "..." }
        # { action: "journal_save", text: "..." }
        # { action: "agreement_created", ... }

        action = payload.get("action") if isinstance(payload, dict) else None

        if action == "practice_completed":
            practice = payload.get("practice", "unknown")
            await message.answer(f"üåø –°–ø–∞—Å–∏–±–æ ‚Äî –ø—Ä–∞–∫—Ç–∏–∫–∞ ¬´{practice}¬ª –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è. –¢—ã –º–æ–ª–æ–¥–µ—Ü.")
        elif action == "journal_save":
            await message.answer("üìù –ó–∞–ø–∏—Å—å –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å.")
        elif action == "transformation_step":
            await message.answer("üîÅ –®–∞–≥ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Å–≤–æ—ë–º —Ç–µ–º–ø–µ.")
        elif action == "agreement_created":
            await message.answer("üìú –°–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å —Å–æ–±–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –£–¥–∞—á–∏ –Ω–∞ –ø—É—Ç–∏.")
        else:
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ!")

    else:
        # Plain text message‚Äîinterpret as support message if user says so
        text = (message.text or "").lower()
        if "–ø–æ–º–æ—â" in text or "–ø—Ä–æ–±–ª–µ–º" in text or "support" in text:
            # In a real app, forward to support chat or save to DB
            await message.answer("–°–ø–∞—Å–∏–±–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –ø—Ä–æ—Å—å–±—É –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ. –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        else:
            # Default reply with quick button to WebApp
            await message.answer(
                "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ú–∞—Å—Ç–µ—Ä—Å–∫—É—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè° –í –ú–∞—Å—Ç–µ—Ä—Å–∫—É—é", web_app=WebAppInfo(url=MINI_APP_URL))]
                ])
            )


# -------------------------
# Start
# -------------------------
dp.include_router(router)


async def main():
    await set_webapp_menu(bot)
    logging.info("Bot polling started.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
