import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import (
    Message,
    WebAppInfo,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    MenuButtonWebApp
)
from aiogram.filters import Command
from config import BOT_TOKEN, MINI_APP_URL
# main.py ‚Äî –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ, –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
import os

print("üîç –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—á–∞—Å—Ç–∏—á–Ω–æ):")
for key in os.environ.keys():
    if "BOT" in key or "TOKEN" in key or "APP" in key:
        print(f"  {key} = {os.environ[key][:20]}...")  # –ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤

BOT_TOKEN = os.getenv("BOT_TOKEN")
print(f"üéØ BOT_TOKEN = {repr(BOT_TOKEN)}")  # –ø–æ–∫–∞–∂–µ—Ç None, –µ—Å–ª–∏ –Ω–µ—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å WebApp (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)


async def set_webapp_menu(bot: Bot):
    await bot.set_chat_menu_button(
        menu_button=MenuButtonWebApp(
            text="–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è", web_app=WebAppInfo(url=MINI_APP_URL))
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è


def get_start_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø—É—Ç—å",
                              web_app=WebAppInfo(url=MINI_APP_URL))],
        [InlineKeyboardButton(text="üîç –ß—Ç–æ —è —É–º–µ—é",
                              callback_data="about_features")],
        [InlineKeyboardButton(text="üìñ –û –∫–Ω–∏–≥–µ", callback_data="about_book")],
        [InlineKeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–≤ –Ω–∞—á–∞–ª–æ"


def get_back_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –í –Ω–∞—á–∞–ª–æ",
                              callback_data="back_to_start")]
    ])


@router.message(Command("start"))
async def cmd_start(message: Message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç.\n"
        "–¢—ã –Ω–µ –æ–¥–∏–Ω. –ò —Ç—ã –Ω–µ —Å–ª–æ–º–∞–ª—Å—è.\n"
        "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ ‚Äî –∏ –æ–Ω –∏–º–µ–µ—Ç —Å–º—ã—Å–ª.\n"
        "–Ø ‚Äî —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø–æ –∫–Ω–∏–≥–µ \"–ù–∞–π—Ç–∏ —Å–µ–±—è\".\n"
        "–í—Å—ë –∑–¥–µ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ü—Ä–æ—Å—Ç–æ –±—É–¥—å —Å —Å–æ–±–æ–π —á–µ—Å—Ç–µ–Ω."
    )
    await message.answer(welcome_text, reply_markup=get_start_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫


@router.callback_query()
async def handle_callbacks(callback: types.CallbackQuery):
    if callback.data == "about_features":
        text = (
            "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å —Ç–≤–æ–µ–π –æ–ø–æ—Ä–æ–π –Ω–∞ —ç—Ç–æ–º –ø—É—Ç–∏. –í–æ—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ:\n\n"
            "üìç –ü–æ–Ω—è—Ç—å, –≥–¥–µ —Ç—ã —Å–µ–π—á–∞—Å: –ü—Ä–æ–≤–µ–¥–µ–º —á–µ—Å—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ç–≤–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.\n"
            "üß≠ –ù–∞–π—Ç–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã: –ü–æ–∫–∞–∂—É, –Ω–∞ –∫–∞–∫–æ–º –∏–∑ 6 —É—Ä–æ–≤–Ω–µ–π –∫–Ω–∏–≥–∏ —É —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è, –∞ –≥–¥–µ ‚Äî —Ç–≤–æ—è —Å–∏–ª–∞.\n"
            "üõ†Ô∏è –î–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: –ü—Ä–æ–≤–µ–¥—É —Ç–µ–±—è –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º –∏–∑ –∫–Ω–∏–≥–∏ ‚Äî ¬´–ü–æ–ª–µ –ª—é–±–≤–∏¬ª, ¬´–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–µ¬ª –∏ –¥—Ä—É–≥–∏–º.\n"
            "üìù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–∏: –ü–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –∏ –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥—É—Ç –≤–≥–ª—É–±—å.\n"
            "üì¨ –ú—è–≥–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å–µ–±–µ: –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ–ø–∞–¥–µ—à—å, —è —Ç–∏—Ö–æ–Ω—å–∫–æ –ø–æ—Å—Ç—É—á—É—Å—å, —á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å, –∫–∞–∫ —Ç—ã."
        )
        await callback.message.edit_text(text, reply_markup=get_back_keyboard())

    elif callback.data == "about_book":
        text = (
            "–ö–Ω–∏–≥–∞ \"–ù–∞–π—Ç–∏ —Å–µ–±—è\" ‚Äî —ç—Ç–æ –Ω–µ —Å–±–æ—Ä–Ω–∏–∫ —Å–æ–≤–µ—Ç–æ–≤, –∞ –∂–∏–≤–∞—è –∫–∞—Ä—Ç–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –æ—Ç –≤—ã–≥–æ—Ä–∞–Ω–∏—è –∫ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏.\n\n"
            "–û–Ω–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –æ–∫–∞–∑–∞–ª—Å—è –≤ —Ç–æ—á–∫–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –∫—Ä–∏–∑–∏—Å–∞: –∫–æ–≥–¥–∞ –ø—Ä–∏–≤—ã—á–Ω—ã–µ —Ü–µ–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç, —Ä–∞–±–æ—Ç–∞ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç–∏, –∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å \"–ß–µ–≥–æ —è —Ö–æ—á—É?\" –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç.\n\n"
            "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ–µ –µ—â–µ –Ω–µ—Ç, –æ–Ω–∞ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Ç–≤–æ–∏–º –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–º –∫–æ–º–ø–∞—Å–æ–º."
        )
        # –î–æ–±–∞–≤—å –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –Ω–∞ Ozon",
                                  url="https://www.ozon.ru/...")],
            [InlineKeyboardButton(text="üöÄ –ü–æ–µ—Ö–∞–ª–∏ –¥–∞–ª–µ–µ",
                                  web_app=WebAppInfo(url=MINI_APP_URL))],
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –Ω–∞—á–∞–ª–æ",
                                  callback_data="back_to_start")]
        ]))

    elif callback.data == "support":
        text = (
            "–ò–Ω–æ–≥–¥–∞ –≤ –ø—É—Ç–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.\n\n"
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–æ—Ç–æ–º? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å —É–ª–µ—Ç–∏—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.\n\n"
            "–ß—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –Ω—É–∂–Ω–∞ –ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ? –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏, –ê—Ä—Ç—ë–º –ì—Ä–∞—Ñ–æ–≤, –ø—Ä–æ–≤–æ–¥–∏—Ç –ª–∏—á–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n"
            "–ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –æ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏–Ω–≥–∞—Ö - —Å–º–æ—Ç—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ"
        )
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="ü§ñ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="report_bug")],
            [InlineKeyboardButton(
                text="üë§ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –∞–≤—Ç–æ—Ä–æ–º", url="https://t.me/artyom_grafov")],
            [InlineKeyboardButton(
                text="üéì –¢—Ä–µ–Ω–∏–Ω–≥–∏", url="https://t.me/kanal_masterskaya")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –Ω–∞—á–∞–ª–æ",
                                  callback_data="back_to_start")]
        ]))

    elif callback.data == "report_bug":
        await callback.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!",
            reply_markup=get_back_keyboard()
        )
        # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        # (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ FSM)

    elif callback.data == "back_to_start":
        await cmd_start(callback.message)

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App


@router.message()
async def handle_webapp_data(message: Message):
    if message.web_app_data:
        data = message.web_app_data.data
        user = message.from_user
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        print(f"Mini App data from {user.id}: {data}")

        # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–∞–∫—Ç–∏–∫—É
        if '"action":"practice_completed"' in data:
            await message.answer(
                "üåø –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—à—ë–ª(–ª–∞) –ø—Ä–∞–∫—Ç–∏–∫—É! –¢—ã –¥–µ–ª–∞–µ—à—å –≤–∞–∂–Ω—ã–π —à–∞–≥ –∫ —Å–µ–±–µ.\n\n"
                "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ú–∞—Å—Ç–µ—Ä—Å–∫—É—é", web_app=WebAppInfo(url=MINI_APP_URL))]
                ])
            )
        else:
            await message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ!")
    else:
        # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if "—Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ" in str(message.text).lower():
            pass  # –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å FSM
        else:
            await message.answer("–Ø –ø–æ–Ω—è–ª. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ú–∞—Å—Ç–µ—Ä—Å–∫—É—é, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                     [InlineKeyboardButton(
                                         text="üè° –í –ú–∞—Å—Ç–µ—Ä—Å–∫—É—é", web_app=WebAppInfo(url=MINI_APP_URL))]
                                 ]))

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(router)

# –ó–∞–ø—É—Å–∫


async def main():
    await set_webapp_menu(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
